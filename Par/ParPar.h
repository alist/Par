/* Copyright Â© 2015 Warren Stringer - MIT License - see file: License.mit */

#import "Tok.h"
#import "Par.h"
#import "ParBoot.h"
#import <string>
#import <unordered_map>

typedef unordered_map<std::string,Par*>NamePars;

class ParPar {
    
    static ParBoot _ParBoot; // grammar for parsing new grammars
    NamePars namePars;  // namePars[*name] = par
    int errors;         // count errors
    
public:

    ParList grammar;    // list of Pars that refer to each other
    Toks toks;          // token generated by applying grammar to document;
    
    ParPar() { errors=0; }
 
    void parFile2Grammar(const char*fname,  FILE *fp);
    void parBuf2Grammar (const char*buf,    FILE *fp);
    void txtFile2Tokens (const char*fname,  FILE *fp, bool trace=false);
    void txtBuf2Tokens  (const char*buf,    FILE *fp);
    void txtBuf2TokFile (const char*buf, const char *fname);

private:
    
    void _bufGram2toks(const char *buf, ParList &gram, FILE *fp);
    void _toks2Grammar();
    int  _addList(Par*par,int toki);
    void _hashGrammar(Par *par);
    void _bindName(Par*par);
    void _promoteOnlyChild(Par *par);
    void _bindGrammarTree(Par*par);
    void _bindGrammar();
};