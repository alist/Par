
Par extends PCRE regular expressions with a symbolic toked stream.

For example, the grammar

    def (hello world)
    hello ('hello')
    world ('world')

    "hello world" // will convert this string into the following token stream

    0, 1: def :
    1, 2:  hello : hello
    2, 2:  world : world

Par supports alternation '|' and repetition '+','*','?'
and behaves as expected. So, changing def to:

    def (hello | world)+
    hello ('hello')
    world ('world')

    "hello world" // changes the output stream to two defs:

    0, 1: def :
    1, 2:  hello : hello
    2, 1: def :
    3, 2:  world : world

Par uses PCRE to match everything between the ' ' quotes.
So, the the regex patterns behave as expected, including:

    '^' to match at the beginning
    '?' as an optional and
    '$' to match at the end of the line

So, the grammar:

    def (hello | world)+
    hello ('^he?ll?o')
    world ('wo?rld$')

    "hlo yo wrld" // will match "hlo", ignore "yo" and match "wrld"

    0, 1: def :
    1, 2:  hello : hlo
    2, 1: def :
    3, 2:  world : wrld

As Par matches a pattern it can advance the document pointer
to the next non-whitespace character. So, the following grammar
with 'world' and 'hello' reversed:

    def (world | hello)+
    hello ('hello')
    world ('world')

    "hello world" // will match "world" first, advance the doc pointer and miss "hello"

    0, 1: def :
    1, 2:  world : world

To not advance the pointer, use a preceeding (n'...') like so

    def (world | hello)+
    hello (n'hello')
    world (n'world')

    "hello world" // which will yield independant def results

    0, 1: def :
    1, 2:  world : world
    2, 1: def :
    3, 2:  hello : hello

Which comes in handy for island parsers.
But, be careful, as it will only match once for the same document:

    "hello world hello hello" // will still result in

    0, 1: def :
    1, 2:  world : world
    2, 1: def :
    3, 2:  hello : hello

To make the match case independant, use a preceeding 'i'

    def (hello world)+
    hello (i'hello')
    world (i'world')

    "Hello WORLD" // which will match the mixed case string
    0, 1: def :
    1, 2:  hello : Hello
    2, 2:  world : WORLD

Par does not require a surrounding parens'()' to return the match result.
However, an inner parens

    def (hello world)+
    hello ('he(ll)?o')
    world ('world')

    "hello world" //  can result a confusing result:

    0, 1: def :
    1, 2:  hello : ll
    2, 2:  world : world

So, add surrounding parens

    def (hello world)+
    hello ('(he(ll)?o)')
    world ('world')

    "hello world" //  to resolve what value is returned

    0, 1: def :
    1, 2:  hello : hello
    2, 2:  world : world

Par also matches string literals between double quotes "..."
Which comes in handy for parsing characters that have special Regex meanings
such as ()[]{}!$^*? .


    def (hello world paren? emoji?)+
    hello ('hello')
    world ('world')
    paren ("(" aside ")")
    aside (i'[a-z ]*')
    emoji('^üòä|üòÉ|üòè|üòà')

    "hello world (yo) üòä" // resulting in the following stream

    0, 1: def :
    1, 2:  hello : hello
    2, 2:  world : world
    3, 2:  paren :
    4, 3:   aside : yo
    5, 2:  emoji : üòä

Notice that 'paren(...)' combined literals and symbols. If the values are not needed,
we could combine everything together in a compound statement like, so:

    woohoo ('hello' 'world' ("(" i'[a-z ]*' ")")? '^üòä|üòÉ|üòè|üòà')+

    "hello beautiful world (yo) üòä" // resulting in a single token

     0, 1: woohoo : üòä

Of course, 'hello' and 'world' could refer to more complex patterns to match:

    def (hello world)+
    hello (i'^hello' | i'(good (morning|afternoon|evening))')
    world (i'^world' | i'^planet' | i'^earth')

    "good morning planet"

    0, 1: def :
    1, 2:  hello : good morning
    2, 2:  world : planet

Both hello(...) and world(...) are two islands. Use a '~' to build a bridge.
The following grammar uses '~extra' to bridge between 'hello' and 'world'

    def (hello ~extra world)+
    hello (i'^hello' | i'(good (morning|afternoon|evening))')
    world (i'^world' | i'^planet' | i'^earth')

    "good morning big beautiful planet" // resulting in:

    0, 1: def :
    1, 2:  hello : good morning
    2, 2:  extra : big
    3, 2:  extra : beautiful
    4, 2:  world : planet


RECURSION

Right recursion is allowed; as long as there is preceeding pattern
that matches one more times

    def (hello def? ~extra world)+
    hello (i'^hello'|i'(good (morning|afternoon|evening))')
    world (i'^world'|i'^planet'|i'^earth')

    "Hello and a good morning big beautiful planet earth"

    0, 1: def :
    1, 2:  hello : Hello
    2, 2:  def :
    3, 3:   hello : good morning
    4, 3:   extra : big
    5, 3:   extra : beautiful
    6, 3:   world : planet
    7, 2:  world : earth

Left recursion will exit the app, so:

    def (def? hello world) ... // or
    def (hello* def? world) ... // for

    "hello world " // will result in the following message
    *** def:parse exceeded maximum levels:200 ***


