/* this is manually maintained description of Def.par ; it is not compiled
 * it could be out of sync, if changes were made to Def.par, and not here
 * see Def.par for more details
 */
def (par list)+

par (name)

list ("(" (ors | ands | item | list)+ ")" repeat? )

  ors (item ("|" (ands | item))+ ) // explicit '|' has precedence over implicit ' '

  ands (item item+) // two or more items

  item ((named|quote|regx) pred?)

    named (name repeat?)
    quote ('^\\"([^\\"]*)\\"')
    regx  ('^([i]?\\'.*\\')' pred?)
    pred  ('=>\'(\w+)\')
    meta  ('^[\~]([a-z]+)')

  repeat (any mny opt)

    any ("*") // 0 to n
    mny ("+") // 1 to n
    opt ("?") // 0 or 1

name ('^([A-Za-z_]([A-Za-z0-9_])+)' )

cmt  ('^[/][/][ ]*(.*?)[\r\n]+|^[ \r\n\t]+')